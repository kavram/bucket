<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
 http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
 ">



	<context:property-placeholder
		system-properties-mode="OVERRIDE" ignore-resource-not-found="true"
		location="file:/config/upmile.properties" />

	<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>	

	<bean name="connectionFactory" class="com.upmile.persistence.ConnectionFactory" init-method="init" scope="singleton">
		<property name="dataSource" ref="dataSource"/>
	</bean>	
 
	<bean name="metaDataManager" class="com.upmile.meta.MetaDataManager" init-method="init" scope="singleton">
	</bean>	

	<bean id="velocityUtils" class="com.upmile.util.VelocityUtils" init-method="init" scope="singleton">
        <property name="filePath" value="${vm.file.resource.loader.path}"/>
        <property name="loader" value="${vm.resource.loader}"/>
        <property name="forEachScopeControl" value="${vm.foreach.provide.scope.control}"/>
        <property name="interpolateStringLiterals" value="${vm.runtime.interpolate.string.literals}"/>
        <property name="domain" value="${conf.domain}"/>
        <property name="uploadedImagesUrl" value="${conf.uploaded.images.url}"/>
        <property name="uploadedImagesPath" value="${conf.uploaded.images.path}"/>
	</bean>	

	<bean id="vtHelper" class="com.upmile.util.VelocityHelper" scope="prototype">
	</bean>	
	
	<bean id="sendEmail" class="com.upmile.jobs.SendEmail">
		<property name="smtphost" value="${email.smtp.host}"/>
	</bean>	
	
	<bean id="sendEmailJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
  		<property name="targetObject" ref="sendEmail" />
  		<property name="targetMethod" value="send" />
  		<property name="concurrent" value="false" />
	</bean>	

	<bean id="sendEmailJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<!-- see the example of method invoking job above -->
    	<property name="jobDetail" ref="sendEmailJob" />
    	<!-- 10 seconds -->
    	<property name="startDelay" value="10000" />
    	<!-- repeat every 50 seconds -->
    	<property name="repeatInterval" value="10000" />
	</bean>

	<bean id="closeExpiredOffers" class="com.upmile.jobs.CloseExpiredOffers">
	</bean>	

	<bean id="closeExpiredOffersJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
  		<property name="targetObject" ref="closeExpiredOffers" />
  		<property name="targetMethod" value="close" />
  		<property name="concurrent" value="false" />
	</bean>	

	<bean id="closeExpiredOffersTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="closeExpiredOffersJob" />
    	<!-- run every morning at 12 AM -->
    	<property name="cronExpression" value="0 0 0 * * ?" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    	<property name="triggers">
        	<list>
        	 <!--    
            	<ref bean="sendEmailJobTrigger" />
            	<ref bean="closeExpiredOffersTrigger" />
             -->	
        	</list>
    	</property>
	</bean>
</beans>

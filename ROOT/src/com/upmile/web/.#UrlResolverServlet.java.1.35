package com.upmile.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.Velocity;
import org.json.JSONArray;

import com.upmile.data.IObject;
import com.upmile.data.IObjectWrapper;
import com.upmile.data.UrlElementMeta;
import com.upmile.meta.HtmlTemplateMeta;
import com.upmile.meta.MetaDataManager;
import com.upmile.operation.OperationHelper;
import com.upmile.persistence.ConnectionFactory;
import com.upmile.quartz.QuartzFactory;
import com.upmile.util.CookieUtils;
import com.upmile.util.EmailUtils;
import com.upmile.util.OfferVelocityHelper;
import com.upmile.util.VelocityHelper;
import com.upmile.util.VelocityUtils;

public class UrlResolverServlet extends HttpServlet {
	static Logger log = Logger.getLogger(UrlResolverServlet.class);
	private static final long serialVersionUID = -7867751973896239956L;
	private static int AUTHENTICATED_USER_REQUIRED = 0;
	private static int COOKIED_USER_REQUIRED = 1;
	private static int GET_USER_DETAILS = 1;
	private static int PROCESS_AUTHORIZE_REPLY = 2;
	private static int CHECK_AUTHORIZE_REPLY = 3;
	private static int PREOP_CHECK_BIZ_OWNER_ENABLED = 4;
	private static int GET_BIZ_DETAILS = 5;
	private static int GET_OFFER_BY_ID = 6;
	private static int SIGN_OUT = 7;
	private static int PREOP_CHECK_IF_USER_BIZ_OWNER = 8;
	private static int GET_ACTIVE_OFFER_BY_ID_IN_URL = 9;
	private static int GET_ACTIVE_OFFERS_BY_USER_ZIPCODE_IF_IN_SESSION = 10;
	private static int GET_MY_ACTIVE_OFFERS = 11;
	private static int GET_MY_ORDERS = 12;

	public void init(){
		try {
			ConnectionFactory.init();
			ConnectionFactory cf = ConnectionFactory.getInstance();
			cf.createConnection();
			//QuartzFactory.init();
			//EmailUtils.init();
			VelocityUtils.init();
			//velocityTest();
			ConnectionFactory.getInstance().commitAndReleaseConn();
		} catch (Exception e) {
        	log.error("Exception: " + e.getMessage(), e);
		}
	}
	
	public void destroy(){
		com.upmile.quartz.QuartzFactory.shutdown();
		try {
			ConnectionFactory.close();
		} catch (Exception e) {
			log.error("Exception: " + e.getMessage(), e);
		}
	}
	
	public void velocityTest(){
		VelocityContext context = new VelocityContext(); 
		context.put( "custfname", new String("Velocity") ); 
		Template template = null; 
		try { 
			template = Velocity.getTemplate("new_app_req_employee.vm"); 
			StringWriter sw = new StringWriter();
			template.merge(context, sw);
			log.debug("res: " + sw.toString());
		}catch( Exception e ) {
			log.error(e.getMessage(), e);
		}
				 		
		
	}
	
	public void doGet(HttpServletRequest request, HttpServletResponse res) throws ServletException, IOException {
        ConnectionFactory cf = ConnectionFactory.getInstance();
        try {
            cf.createConnection();
        	processRequest(request, res);
            cf.commitAndReleaseConn();
        } catch (Exception ex) {
            cf.rollbackAndReleaseConn();
        	log.error("Exception: " + ex.getMessage(), ex);
        }
    	
	}

    private void processRequest(HttpServletRequest request, HttpServletResponse res) throws IOException{
        HtmlTemplateMeta template = null;
    	String reqUri = request.getRequestURI();
        log.debug("reqUri: " + reqUri);
        Enumeration<String> en = request.getParameterNames();
        StringBuffer params = new StringBuffer();
        while(en.hasMoreElements()){
        	String pname = (String)en.nextElement();
        	String pvalue = request.getParameter(pname);
        	if(params.length() > 0)
        		params.append("&");
        	params.append(pname + "=" + pvalue);
        }
        template = getTemplateMeta(reqUri);
        if(template != null){
        	renderTemplate(request, res, template, reqUri, params.toString());
        }else{
        	if(reqUri.equals("/favicon.ico"))
        		res.sendRedirect("/static/images/31.ico");
        	else
        		renderTemplate(request, res, getNotFoundTemplate(), reqUri, params.toString());
        }
    }
    
    private void renderTemplate(HttpServletRequest request, HttpServletResponse res, HtmlTemplateMeta tmpl, String uri, String params) {
    	try{
    		IObject user = getUser(request, res);
    		for(Integer preOp : tmpl.getPreOps()){
    			if(preOp.intValue() == UrlResolverServlet.AUTHENTICATED_USER_REQUIRED){
    				if(user == null || !request.getSession().getAttribute(Constants.USER_SESSION_STATUS).equals(Constants.SESSION_STATUS_AUTHENTICATED)){
    					if(!params.isEmpty())
    						uri += "?" + params;
    					res.sendRedirect("/signin?goto=" + uri);
    					return;
    				}
    			}else if(preOp.intValue() == UrlResolverServlet.COOKIED_USER_REQUIRED){
    				if(user == null){
    					if(!params.isEmpty())
    						uri += "?" + params;
    					res.sendRedirect("/signin?goto=" + uri);
    					return;
    				}
    			}else if(preOp.intValue() == UrlResolverServlet.CHECK_AUTHORIZE_REPLY){
    				if(!checkAuthorizeReply(uri, request, res)){
    					//res.sendRedirect("/not-found");
    					renderTemplate(request, res, getNotFoundTemplate(), uri, params.toString());
    					return;
    				}
    			}else if(preOp.intValue() == UrlResolverServlet.PREOP_CHECK_BIZ_OWNER_ENABLED){
    				if(!checkUserCanRegBiz(request, res)){
    					res.sendRedirect("/not-found");
    					return;
    				}
    			}else if(preOp.intValue() == UrlResolverServlet.PREOP_CHECK_IF_USER_BIZ_OWNER){
    				if(!checkUserBizOwner(request, res)){
    					res.sendRedirect("/not-found");
    					return;
    				}
    			}
    		}
    		VelocityHelper vh = new VelocityHelper(tmpl.getTemplate());
    		for(Integer postOp : tmpl.getPostOps()){
    			if(postOp.intValue() == UrlResolverServlet.GET_USER_DETAILS){
    				vh.addVariable("user", getUserDetails(request, res));
    			}else if(postOp.intValue() == UrlResolverServlet.PROCESS_AUTHORIZE_REPLY){
    				processAuthorizeReply(uri, request, res, vh);
    			}else if(postOp.intValue() == UrlResolverServlet.GET_BIZ_DETAILS){
    				vh.addVariable("biz", getBizDetails(user, request, res));
    			}else if(postOp.intValue() == UrlResolverServlet.GET_OFFER_BY_ID){
    				vh.addVariable("offer", getOffer(user, request, res));
    			}else if(postOp.intValue() == UrlResolverServlet.SIGN_OUT){
    				signout(request, res);
    			}else if(postOp.intValue() == UrlResolverServlet.GET_ACTIVE_OFFER_BY_ID_IN_URL){
    				getOfferByIdInUrl(vh, uri, request, res);
    			}else if(postOp.intValue() == UrlResolverServlet.GET_ACTIVE_OFFERS_BY_USER_ZIPCODE_IF_IN_SESSION){
    				getActiveOffersByUserZipcode(vh, uri, request, res);
    			}else if(postOp.intValue() == UrlResolverServlet.GET_MY_ACTIVE_OFFERS){
    				getMyActiveOffers(vh, uri, request, res);
    			}else if(postOp.intValue() == UrlResolverServlet.GET_MY_ORDERS){
    				getMyOrders(vh, uri, request, res);
    			}
    		}
    		returnPage(vh.renderTemplate(), request, res);
    	}catch(Exception e){
    		log.error(e.getMessage(), e);
    	}
    }
    
	private void getMyOrders(VelocityHelper vh, String uri, HttpServletRequest request, HttpServletResponse res) throws Exception {
		OperationHelper oh = new OperationHelper(6, request, res, vh);
		oh.execOperation();
	}

	private void getMyActiveOffers(VelocityHelper vh, String uri, HttpServletRequest request, HttpServletResponse res) throws Exception {
		OperationHelper oh = new OperationHelper(7, request, res, vh);
		oh.execOperation();
	}

	private void getActiveOffersByUserZipcode(VelocityHelper vh, String uri, HttpServletRequest request, HttpServletResponse res) throws Exception {
		OperationHelper oh;
		IObject user = (IObject)request.getSession().getAttribute(Constants.USER);
		if(user == null || (user != null && user.getINode("zipcode") == null)){
			oh = new OperationHelper(13, request, res, vh);
			oh.addParameter("zip", "");
		}else{
			oh = new OperationHelper(17, request, res, vh);
			oh.addParameter("zip", user.getINode("zipcode").getValue().toString());
		}
		oh.execOperation();
	}

	private boolean checkUserBizOwner(HttpServletRequest request, HttpServletResponse res) {
    	try {
    		IObject user = (IObject) request.getSession().getAttribute(Constants.USER);
    		if(user.getINode("biz_owner").getValue().toString().equals("2"))
    			return true;
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
		return false;
	}

	private void signout(HttpServletRequest request, HttpServletResponse res) throws Exception {
    	CookieUtils.removeCookie(res);
		request.getSession().removeAttribute(Constants.USER);
		request.getSession().removeAttribute(Constants.USER_SESSION_STATUS);
		res.sendRedirect("/");
	}

	private String getOffer(IObject user, HttpServletRequest request, HttpServletResponse res) {
    	String ret = "[]";
    	String oid = "";
    	if(user == null)
    		return ret;
    	try {
            Enumeration<String> en = request.getParameterNames();
            while(en.hasMoreElements()){
            	String pname = (String)en.nextElement();
            	if(pname.equals("oid"))
            		oid = request.getParameter(pname);
            }
            if(oid.isEmpty())
            	return ret;
            OperationHelper oh = new OperationHelper(24, request, res);
            oh.addParameter("user_id", user.getINode("id").getValue().toString());
            oh.addParameter("id", oid);
    		ret = oh.execOperation().serializeObjectsToJSONString();
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
    	return ret;
	}

	private void processAuthorizeReply(String uri, HttpServletRequest request, HttpServletResponse res, VelocityHelper vh) {
    	String[] split = uri.split("/");
    	try {
    		OperationHelper oh = null;
    		if(split[4].equals("0"))
    			oh = new OperationHelper(15, request, res);
    		else
    			oh = new OperationHelper(16, request, res);
    		oh.addParameter("id", split[3]);
    		oh.addParameter("uuid", split[2]);
    		oh.execOperation();
    		vh.addVariable("user", getUserDetails(request, res));
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
		
	}

	private HtmlTemplateMeta getTemplateMeta(String uri){
    	HtmlTemplateMeta template = null;
    	String[] splitUri = uri.split("/");
        UrlElementMeta root = MetaDataManager.getInstance().getRootUrlElement();
        if(splitUri.length == 0)
        	template = root.getTemplate();
        else {
        	UrlElementMeta uem = root.getChildrenElements().get(splitUri[1]);
        	for(int i = 1; i <= splitUri.length; i++){
        		if(uem == null)
        			break;
        		if(uem.getTemplate() != null)
        			template = uem.getTemplate();
        		int nInd = i + 1;
        		if(nInd < splitUri.length){
        			String next = splitUri[nInd];  
        			if(!uem.getChildrenElements().containsKey(next))
        				break;
        			else
        				uem = uem.getChildrenElements().get(next);
        		}
        	}
        }
    	return template;
    }
    
	private HtmlTemplateMeta getNotFoundTemplate(){
		UrlElementMeta root = MetaDataManager.getInstance().getRootUrlElement();
		UrlElementMeta nf =  root.getChildrenElements().get("not-found");
		return nf.getTemplate();
	}
	
    private void returnPage(String page, HttpServletRequest req, HttpServletResponse res) throws IOException{
        res.setContentType("text/html");
        res.setCharacterEncoding(req.getCharacterEncoding());
        res.setBufferSize(page.length());
        res.setHeader("Content-Length", String.valueOf(page.length()));
        PrintWriter writer = res.getWriter();
        writer.println(page);
        writer.flush();
    }
    
    private IObject getUser(HttpServletRequest request, HttpServletResponse res) {
    	IObject user = (IObject)request.getSession().getAttribute(Constants.USER);
		if(user != null)
			return user;
    	
		try{
			String[] cookVals = CookieUtils.getValuesFromCookie(request);
			if(cookVals != null)
				setUserToSession(cookVals[0], cookVals[1], request, res);
			return (IObject)request.getSession().getAttribute(Constants.USER);
		}catch(Exception e){
			log.error("Exception: " + e.getMessage(), e);
		}
		return null;
    }

    private void getOfferByIdInUrl(VelocityHelper vh, String uri, HttpServletRequest request, HttpServletResponse res){
    	IObjectWrapper ret = null;
    	String[] split = uri.split("/");
    	try {
    		OperationHelper oh = new OperationHelper(56, request, res, vh);
    		oh.addParameter("id", split[2]);
    		ret = oh.execOperation();
    		vh.addVariable("offersHTML", ret.getRenderedHTML());
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage());
    		vh.addVariable("offersHTML", "<div>Oops, no offer is found.</div>");
    	}
    }

    
    private boolean checkAuthorizeReply(String uri, HttpServletRequest request, HttpServletResponse res){
    	String[] split = uri.split("/");
    	boolean ret = false;
    	try {
    		if(!split[4].equals("0") && !split[4].equals("1"))
    			return ret;
    		OperationHelper oh = new OperationHelper(14, request, res);
    		oh.addParameter("id", split[3]);
    		oh.addParameter("uuid", split[2]);
    		if(oh.execOperation().getObjects().size() > 0)
    			ret = true;
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
    	return ret;
    }

    private boolean checkUserCanRegBiz(HttpServletRequest request, HttpServletResponse res){
    	boolean ret = false;
    	try {
    		OperationHelper oh = new OperationHelper(18, request, res);
    		if(oh.execOperation().getObjects().size() > 0)
    			ret = true;
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
    	return ret;
    }
    
    private void setUserToSession(String id, String uuid, HttpServletRequest request, HttpServletResponse res){
    	try {
    		OperationHelper oh = new OperationHelper(9, request, res);
    		oh.addParameter("id", id);
    		oh.addParameter("uuid", uuid);
    		oh.execOperation();
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
    }

    private String getUserDetails(HttpServletRequest request, HttpServletResponse res) throws Exception{
    	IObject user = (IObject)request.getSession().getAttribute(Constants.USER);
    	String ret = "[]";
    	if(user == null)
    		return ret;
    	JSONArray ja = new JSONArray();
    	ja.put(user.getJSONObj());
    	return ja.toString();
    }

    
    private String getBizDetails(IObject user, HttpServletRequest request, HttpServletResponse res){
    	String ret = "[]";
    	if(user == null)
    		return ret;
    	try {
    		OperationHelper oh = new OperationHelper(23, request, res);
    		oh.addParameter("owner_id", user.getINode("id").getValue().toString());
    		ret = oh.execOperation().serializeObjectsToJSONString();
    	}catch(Exception ex){
    		log.error("Exception: " + ex.getMessage(), ex);
    	}
    	return ret;
    }

}
